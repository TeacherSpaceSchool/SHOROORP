{"version":3,"sources":["pages/Geo.js"],"names":["datePicker","React","createRef","marginFab","undefined","mainWindow","current","offsetWidth","width","Plan","memo","props","classes","_props$mini_dialogAct","mini_dialogActions","showSelectRegion","showSelectPoint","_props$tableActions","tableActions","setSelectedRegionGeo","setSelectedPointGeo","showSnackBar","snackbarActions","_props$table","table","regionGeo","pointGeo","status","user","profile","app","_useState","useState","_useState2","Object","C_projects_shoro_shoro_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","list","setList","useEffect","C_projects_shoro_shoro_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","C_projects_shoro_shoro_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","data","wrap","_context","prev","next","guid","length","name","guidRegion","guidPoint","sent","point","geo","region","t0","t1","stop","_callee2","_context2","includes","role","history","push","_useState3","_useState4","size","setSize","_callee3","_context3","dragend","e","get","geometry","getCoordinates","saveGeo","_ref4","_callee4","_context4","_x","apply","this","arguments","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","react_yandex_maps__WEBPACK_IMPORTED_MODULE_13__","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_10___default","variant","onClick","className","button","height","defaultState","center","zoom","map","element","idx","onDragEnd","key","options","draggable","iconColor","properties","iconCaption","split","_material_ui_core_Fab__WEBPACK_IMPORTED_MODULE_12___default","color","aria-label","fab","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","_material_ui_icons_GpsFixed__WEBPACK_IMPORTED_MODULE_14___default","Event","propTypes","PropTypes","object","isRequired","withStyles","theme","bottom","right","fab2","margin","spacing","unit","textFieldDate","marginLeft","marginRight","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","connect","state","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/22.15706136.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as tableActions from '../redux/actions/table'\nimport * as mini_dialogActions from '../redux/actions/mini_dialog'\nimport Button from '@material-ui/core/Button';\nimport { mainWindow } from '../App'\nimport Fab from '@material-ui/core/Fab';\nimport { DatePicker } from 'material-ui-pickers';\nimport { Map, YMaps, Placemark } from 'react-yandex-maps';\nimport GpsFixed from '@material-ui/icons/GpsFixed';\nimport * as snackbarActions from '../redux/actions/snackbar'\n\nexport const datePicker = React.createRef();\nconst marginFab = mainWindow===undefined||mainWindow.current.offsetWidth>800? 20: 10;\nconst width = mainWindow===undefined||mainWindow.current.offsetWidth>800? 500: 240;\nconst styles = theme => ({\n    fab: {\n        position: 'fixed',\n        bottom: marginFab,\n        right: marginFab\n    },\n    fab2: {\n        position: 'fixed',\n        bottom: marginFab+76,\n        right: marginFab\n    },\n    button: {\n        width: '200px',\n        margin: theme.spacing.unit,\n    },\n    textFieldDate: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        width: width/2,\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n});\n\nconst Plan = React.memo(\n    (props) =>{\n        const { classes } = props;\n        const { showSelectRegion, showSelectPoint } = props.mini_dialogActions;\n        const { setSelectedRegionGeo, setSelectedPointGeo } = props.tableActions;\n        const { showSnackBar } = props.snackbarActions;\n        const { regionGeo, pointGeo  } = props.table;\n        const { status } = props.user;\n        const { profile } = props.app;\n        let [list, setList] = useState([]);\n        useEffect( ()=>{\n            (async ()=> {\n                if((pointGeo.guid).length!==0&&(regionGeo.guid).length!==0){\n                    let data = await tableActions.getDataSimple({name: 'Геолокация', data: {guidRegion: regionGeo.guid, guidPoint: pointGeo.guid}})\n                    if(data.length===0){\n                        setList([{point: pointGeo.name, geo: '42.8700000, 74.5900000', region: regionGeo.name, guidPoint: pointGeo.guid, guidRegion: regionGeo.guid}])\n                    }\n                    else {\n                        setList(data)\n                    }\n                }\n                else {\n                    setList(await tableActions.getDataSimple({\n                        name: 'Геолокация',\n                        data: {guidRegion: regionGeo.guid, guidPoint: pointGeo.guid}\n                    }))\n                }\n            })();\n        },[pointGeo, regionGeo])\n        useEffect( ()=>{\n            (async ()=> {\n                if (!(status.status==='active'&&['admin', 'организатор', 'реализатор'].includes(status.role))) {\n                    props.history.push('/')\n                }\n                if (status.role!==undefined&&'admin'!==status.role) {\n                    setSelectedRegionGeo({name: profile.region, guid: profile.guidRegion});\n                    if ('организатор'!==status.role)\n                        setSelectedPointGeo({name: profile.point, guid: profile.guidPoint});\n                }\n            })();\n        },[])\n        let [size, setSize] = useState(600);\n        useEffect(()=>{(async ()=>{\n            setSize(mainWindow.current.offsetWidth>1000? [1000, 500]: [mainWindow.current.offsetWidth, 300])\n        })()},[]);\n        let dragend = (e) => {\n            let geo = e.get('target').geometry.getCoordinates()\n            saveGeo(geo[0]+', '+geo[1])\n        }\n        let getGeo = () => {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((position)=>{\n                    saveGeo(position.coords.latitude+', '+position.coords.longitude)\n                });\n            } else {\n                showSnackBar('Геолокация не поддерживается')\n            }\n        }\n        let saveGeo = async(geo) => {\n            setList(await tableActions.getDataSimple({name: 'ГеолокацияСохранить', data: {\n                point: pointGeo.name, geo: geo, region: regionGeo.name, guidRegion: regionGeo.guid, guidPoint: pointGeo.guid}}))\n        }\n        return (\n             <YMaps>\n                <center>\n                    <br/>\n                    <h1>Геолокация</h1>\n                    <Button variant='outlined' onClick={()=>{if('admin'===status.role)showSelectRegion()}} className={classes.button}>\n                        {regionGeo.name}\n                    </Button>\n                    <Button variant='outlined' onClick={()=>{if(['admin', 'организатор'].includes(status.role))showSelectPoint()}} className={classes.button}>\n                        {pointGeo.name}\n                    </Button>\n                    <br/>\n                    <br/>\n                    <Map height={size[1]} width={size[0]} defaultState={{ center: [42.8700000, 74.5900000], zoom: 12 }} >\n                        {list!=undefined&&list.length>0?\n                            list.map((element, idx)=> {\n                                return(\n                                    <Placemark onDragEnd={dragend} key={idx} options={{draggable: ((pointGeo.guid).length!==0&&(pointGeo.guid).length!==0), iconColor: '#252850'}} properties={{iconCaption: element.point}} geometry={element.geo.split(', ')} />\n                                )}):null}\n                    </Map>\n                </center>\n                 {(pointGeo.guid).length!==0&&(pointGeo.guid).length!==0?\n                     <Fab color='primary' aria-label='Найти геолокацию' className={classes.fab} onClick={getGeo}>\n                         <GpsFixed/>\n                     </Fab>\n                     :null}\n             </YMaps>\n        );\n  })\n\nfunction mapStateToProps (state) {\n    return {\n        table: state.table,\n        user: state.user,\n        app: state.app,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        tableActions: bindActionCreators(tableActions, dispatch),\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    }\n}\n\nEvent.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(Plan));\n"],"sourceRoot":""}