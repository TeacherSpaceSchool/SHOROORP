{"version":3,"sources":["pages/Geo.js"],"names":["datePicker","React","createRef","marginFab","undefined","mainWindow","current","offsetWidth","width","Plan","memo","props","classes","_props$mini_dialogAct","mini_dialogActions","showSelectRegion","showSelectPoint","_props$tableActions","tableActions","setSelectedRegionGeo","setSelectedPointGeo","showSnackBar","snackbarActions","_props$table","table","regionGeo","pointGeo","status","user","profile","app","_useState","useState","Date","_useState2","Object","C_projects_shoro_shoro_admin_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","date","setDate","_useState3","_useState4","list","setList","useEffect","C_projects_shoro_shoro_admin_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","C_projects_shoro_shoro_admin_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","data","wrap","_context","prev","next","guid","length","name","JSON","stringify","split","guidRegion","guidPoint","sent","point","geo","region","t0","t1","stop","this","_callee2","_context2","includes","role","history","push","_useState5","_useState6","size","setSize","_callee3","_context3","dragend","e","get","geometry","getCoordinates","saveGeo","_ref4","_callee4","_context4","_x","apply","arguments","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","react_yandex_maps__WEBPACK_IMPORTED_MODULE_14__","material_ui_pickers__WEBPACK_IMPORTED_MODULE_13__","views","label","className","textField","value","onChange","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_10___default","variant","onClick","button","height","defaultState","center","zoom","map","element","idx","onDragEnd","key","options","draggable","iconColor","properties","iconCaption","_material_ui_core_Fab__WEBPACK_IMPORTED_MODULE_12___default","color","aria-label","fab","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","_material_ui_icons_GpsFixed__WEBPACK_IMPORTED_MODULE_15___default","Event","propTypes","PropTypes","object","isRequired","withStyles","theme","bottom","right","fab2","margin","spacing","unit","textFieldDate","marginLeft","marginRight","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","connect","state","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/21.0a2c5fc8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as tableActions from '../redux/actions/table'\nimport * as mini_dialogActions from '../redux/actions/mini_dialog'\nimport Button from '@material-ui/core/Button';\nimport { mainWindow } from '../App'\nimport Fab from '@material-ui/core/Fab';\nimport { DatePicker } from 'material-ui-pickers';\nimport { Map, YMaps, Placemark } from 'react-yandex-maps';\nimport GpsFixed from '@material-ui/icons/GpsFixed';\nimport * as snackbarActions from '../redux/actions/snackbar'\n\nexport const datePicker = React.createRef();\nconst marginFab = mainWindow===undefined||mainWindow.current.offsetWidth>800? 20: 10;\nconst width = mainWindow===undefined||mainWindow.current.offsetWidth>800? 500: 240;\nconst styles = theme => ({\n    fab: {\n        position: 'fixed',\n        bottom: marginFab,\n        right: marginFab\n    },\n    fab2: {\n        position: 'fixed',\n        bottom: marginFab+76,\n        right: marginFab\n    },\n    button: {\n        width: '200px',\n        margin: theme.spacing.unit,\n    },\n    textFieldDate: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        width: width/2,\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n});\n\nconst Plan = React.memo(\n    (props) =>{\n        const { classes } = props;\n        const { showSelectRegion, showSelectPoint } = props.mini_dialogActions;\n        const { setSelectedRegionGeo, setSelectedPointGeo } = props.tableActions;\n        const { showSnackBar } = props.snackbarActions;\n        const { regionGeo, pointGeo  } = props.table;\n        const { status } = props.user;\n        const { profile } = props.app;\n        let [date, setDate] = useState(new Date());\n        let [list, setList] = useState([]);\n        useEffect( ()=>{\n            (async ()=> {\n                if((pointGeo.guid).length!==0&&(regionGeo.guid).length!==0){\n                    let data = await tableActions.getDataSimple({name: 'Геолокация', data: {date: (JSON.stringify(date)).split('T')[0], guidRegion: regionGeo.guid, guidPoint: pointGeo.guid}})\n                    if(data.length===0){\n                        setList([{point: pointGeo.name, geo: '42.8700000, 74.5900000', region: regionGeo.name, guidPoint: pointGeo.guid, guidRegion: regionGeo.guid, date: (JSON.stringify(date)).split('T')[0]}])\n                    }\n                    else {\n                        setList(data)\n                    }\n                }\n                else {\n                    setList(await tableActions.getDataSimple({\n                        name: 'Геолокация',\n                        data: {date: (JSON.stringify(date)).split('T')[0], guidRegion: regionGeo.guid, guidPoint: pointGeo.guid}\n                    }))\n                }\n            })();\n        },[pointGeo, regionGeo, date])\n        useEffect( ()=>{\n            (async ()=> {\n                if (!(status.status==='active'&&['admin', 'организатор', 'реализатор'].includes(status.role))) {\n                    props.history.push('/')\n                }\n                if (status.role!==undefined&&'admin'!==status.role) {\n                    setSelectedRegionGeo({name: profile.region, guid: profile.guidRegion});\n                    if ('организатор'!==status.role)\n                        setSelectedPointGeo({name: profile.point, guid: profile.guidPoint});\n                }\n            })();\n        },[])\n        let [size, setSize] = useState(600);\n        useEffect(()=>{(async ()=>{\n            setSize(mainWindow.current.offsetWidth>1000? [1000, 500]: [mainWindow.current.offsetWidth, 300])\n        })()},[]);\n        let dragend = (e) => {\n            let geo = e.get('target').geometry.getCoordinates()\n            saveGeo(geo[0]+', '+geo[1])\n        }\n        let getGeo = () => {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((position)=>{\n                    saveGeo(position.coords.latitude+', '+position.coords.longitude)\n                });\n            } else {\n                showSnackBar('Геолокация не поддерживается')\n            }\n        }\n        let saveGeo = async(geo) => {\n            setList(await tableActions.getDataSimple({name: 'ГеолокацияСохранить', data: {\n                point: pointGeo.name, geo: geo, region: regionGeo.name, date: (JSON.stringify(date)).split('T')[0], guidRegion: regionGeo.guid, guidPoint: pointGeo.guid}}))\n        }\n        return (\n             <YMaps>\n                <center>\n                    <br/>\n                    <h1>Геолокация</h1>\n                    <br/>\n                    <DatePicker\n                        views={['year', 'month', 'day']}\n                        label='Дата'\n                        className={classes.textField}\n                        value={date}\n                        onChange={setDate}\n                    />\n                    <br/>\n                    <Button variant='outlined' onClick={()=>{if('admin'===status.role)showSelectRegion()}} className={classes.button}>\n                        {regionGeo.name}\n                    </Button>\n                    <Button variant='outlined' onClick={()=>{if(['admin', 'организатор'].includes(status.role))showSelectPoint()}} className={classes.button}>\n                        {pointGeo.name}\n                    </Button>\n                    <br/>\n                    <Map height={size[1]} width={size[0]} defaultState={{ center: [42.8700000, 74.5900000], zoom: 12 }} >\n                        {list!=undefined&&list.length>0?\n                            list.map((element, idx)=> {\n                                return(\n                                    <Placemark onDragEnd={dragend} key={idx} options={{draggable: ((pointGeo.guid).length!==0&&(pointGeo.guid).length!==0), iconColor: '#252850'}} properties={{iconCaption: element.point}} geometry={element.geo.split(', ')} />\n                                )}):null}\n                    </Map>\n                </center>\n                 {(pointGeo.guid).length!==0&&(pointGeo.guid).length!==0?\n                     <Fab color='primary' aria-label='Найти геолокацию' className={classes.fab} onClick={getGeo}>\n                         <GpsFixed/>\n                     </Fab>\n                     :null}\n             </YMaps>\n        );\n  })\n\nfunction mapStateToProps (state) {\n    return {\n        table: state.table,\n        user: state.user,\n        app: state.app,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        tableActions: bindActionCreators(tableActions, dispatch),\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    }\n}\n\nEvent.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(Plan));\n"],"sourceRoot":""}