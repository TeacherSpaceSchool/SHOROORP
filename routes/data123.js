ServerResponse {
    _events:
        [Object: null prototype] {
        finish:
            [ [Function: bound resOnFinish],
        [Function: onevent],
        [Function] ],
        end: [Function: onevent] },
    _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket:
    TLSSocket {
        _tlsOptions:
        { secureContext: [SecureContext],
            isServer: true,
            server: [Server],
            requestCert: false,
            rejectUnauthorized: true,
            handshakeTimeout: 120000,
            ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
            SNICallback: [Function: SNICallback] },
        _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            _SNICallback: null,
            servername: 'kassir.kg',
            alpnProtocol: 'http/1.1',
            authorized: false,
            authorizationError: null,
            encrypted: true,
            _events:
        [Object: null prototype] {
            close: [Array],
                end: [Array],
                secure: [Function: onSocketSecure],
            _tlsError: [Function: onSocketTLSError],
            drain: [Array],
                timeout: [Function: socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Array],
                resume: [Function: onSocketResume],
            pause: [Function: onSocketPause] },
        _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _handle:
        TLSWrap {
            _parent: [TCP],
                _parentWrap: [Socket],
                _secureContext: [SecureContext],
                reading: true,
                onread: [Function: onStreamRead],
            onhandshakestart: [Function: onhandshakestart],
            onhandshakedone: [Function: onhandshakedone],
            onclienthello: [Function: loadSession],
            oncertcb: [Function: loadSNI],
            onnewsession: [Function: onnewsession],
            lastHandshakeTime: 27784,
                handshakes: 0,
                onerror: [Function: onerror],
            _consumed: true,
                [Symbol(owner)]: [Circular] },
        _parent:
            Socket {
            connecting: false,
                _hadError: false,
                _handle: [TCP],
                _parent: null,
                _host: null,
                _readableState: [ReadableState],
                readable: true,
                _events: [Object],
                _eventsCount: 3,
                _maxListeners: undefined,
                _writableState: [WritableState],
                writable: true,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: [Server],
                _server: [Server],
                [Symbol(asyncId)]: 3019,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0 },
        _host: null,
            _readableState:
        ReadableState {
            objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                paused: false,
                emitClose: false,
                destroyed: false,
                defaultEncoding: 'utf8',
                awaitDrain: 0,
                readingMore: false,
                decoder: null,
                encoding: null },
        readable: true,
            _maxListeners: undefined,
            _writableState:
        WritableState {
            objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
            writecb: null,
                writelen: 0,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 0,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: [Object] },
        writable: true,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server:
        Server {
            _contexts: [],
                requestCert: false,
                rejectUnauthorized: true,
                key:
        <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0a 4d 49 49 45 76 51 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 77 ... >,
            cert:
                <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0a 4d 49 49 46 57 54 43 43 42 45 47 67 41 77 49 42 41 67 49 53 41 2b ... >,
            honorCipherOrder: true,
                ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                sessionIdContext: 'cf474c4120c05728039fe7220580fac2',
                _sharedCreds: [SecureContext],
                _events: [Object],
                _eventsCount: 6,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [TCP],
                _usingWorkers: false,
                _workers: [],
                _unref: false,
                allowHalfOpen: false,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                keepAliveTimeout: 5000,
                maxHeadersCount: null,
                headersTimeout: 40000,
                _connectionKey: '6::::443',
                [Symbol(IncomingMessage)]: [Function],
                [Symbol(ServerResponse)]: [Function],
                [Symbol(handshake-timeout)]: 120000,
                [Symbol(snicallback)]: undefined,
                [Symbol(asyncId)]: 36 },
        _server: null,
            ssl:
        TLSWrap {
            _parent: [TCP],
                _parentWrap: [Socket],
                _secureContext: [SecureContext],
                reading: true,
                onread: [Function: onStreamRead],
            onhandshakestart: [Function: onhandshakestart],
            onhandshakedone: [Function: onhandshakedone],
            onclienthello: [Function: loadSession],
            oncertcb: [Function: loadSNI],
            onnewsession: [Function: onnewsession],
            lastHandshakeTime: 27784,
                handshakes: 0,
                onerror: [Function: onerror],
            _consumed: true,
                [Symbol(owner)]: [Circular] },
        _requestCert: false,
            _rejectUnauthorized: true,
            timeout: 120000,
            parser:
        HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            '4': [Function: bound onParserExecute],
            _headers: [],
                _url: '',
                socket: [Circular],
                incoming: [IncomingMessage],
                outgoing: null,
                maxHeaderPairs: 2000,
                _consumed: true,
                onIncoming: [Function: bound parserOnIncoming],
            parsingHeadersStart: 0,
                [Symbol(isReused)]: true },
        on: [Function: socketOnWrap],
        _paused: false,
            _httpMessage: [Circular],
            _peername:
        { address: '::ffff:212.112.122.179',
            family: 'IPv6',
            port: 56678 },
        [Symbol(res)]:
        TLSWrap {
            _parent: [TCP],
                _parentWrap: [Socket],
                _secureContext: [SecureContext],
                reading: true,
                onread: [Function: onStreamRead],
            onhandshakestart: [Function: onhandshakestart],
            onhandshakedone: [Function: onhandshakedone],
            onclienthello: [Function: loadSession],
            oncertcb: [Function: loadSNI],
            onnewsession: [Function: onnewsession],
            lastHandshakeTime: 27784,
                handshakes: 0,
                onerror: [Function: onerror],
            _consumed: true,
                [Symbol(owner)]: [Circular] },
        [Symbol(asyncId)]: 3020,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]:
        Timeout {
            _called: false,
                _idleTimeout: 120000,
                _idlePrev: [TimersList],
                _idleNext: [TimersList],
                _idleStart: 29965,
                _onTimeout: [Function: bound ],
            _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(unrefed)]: true,
                [Symbol(asyncId)]: 3053,
                [Symbol(triggerId)]: 3024 },
        [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(error-emitted)]: false },
    connection:
        TLSSocket {
        _tlsOptions:
        { secureContext: [SecureContext],
            isServer: true,
            server: [Server],
            requestCert: false,
            rejectUnauthorized: true,
            handshakeTimeout: 120000,
            ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
            SNICallback: [Function: SNICallback] },
        _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            _SNICallback: null,
            servername: 'kassir.kg',
            alpnProtocol: 'http/1.1',
            authorized: false,
            authorizationError: null,
            encrypted: true,
            _events:
        [Object: null prototype] {
            close: [Array],
                end: [Array],
                secure: [Function: onSocketSecure],
            _tlsError: [Function: onSocketTLSError],
            drain: [Array],
                timeout: [Function: socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Array],
                resume: [Function: onSocketResume],
            pause: [Function: onSocketPause] },
        _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _handle:
        TLSWrap {
            _parent: [TCP],
                _parentWrap: [Socket],
                _secureContext: [SecureContext],
                reading: true,
                onread: [Function: onStreamRead],
            onhandshakestart: [Function: onhandshakestart],
            onhandshakedone: [Function: onhandshakedone],
            onclienthello: [Function: loadSession],
            oncertcb: [Function: loadSNI],
            onnewsession: [Function: onnewsession],
            lastHandshakeTime: 27784,
                handshakes: 0,
                onerror: [Function: onerror],
            _consumed: true,
                [Symbol(owner)]: [Circular] },
        _parent:
            Socket {
            connecting: false,
                _hadError: false,
                _handle: [TCP],
                _parent: null,
                _host: null,
                _readableState: [ReadableState],
                readable: true,
                _events: [Object],
                _eventsCount: 3,
                _maxListeners: undefined,
                _writableState: [WritableState],
                writable: true,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: [Server],
                _server: [Server],
                [Symbol(asyncId)]: 3019,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0 },
        _host: null,
            _readableState:
        ReadableState {
            objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                paused: false,
                emitClose: false,
                destroyed: false,
                defaultEncoding: 'utf8',
                awaitDrain: 0,
                readingMore: false,
                decoder: null,
                encoding: null },
        readable: true,
            _maxListeners: undefined,
            _writableState:
        WritableState {
            objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
            writecb: null,
                writelen: 0,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 0,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: [Object] },
        writable: true,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server:
        Server {
            _contexts: [],
                requestCert: false,
                rejectUnauthorized: true,
                key:
        <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0a 4d 49 49 45 76 51 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 77 ... >,
            cert:
                <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0a 4d 49 49 46 57 54 43 43 42 45 47 67 41 77 49 42 41 67 49 53 41 2b ... >,
            honorCipherOrder: true,
                ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                sessionIdContext: 'cf474c4120c05728039fe7220580fac2',
                _sharedCreds: [SecureContext],
                _events: [Object],
                _eventsCount: 6,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [TCP],
                _usingWorkers: false,
                _workers: [],
                _unref: false,
                allowHalfOpen: false,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                keepAliveTimeout: 5000,
                maxHeadersCount: null,
                headersTimeout: 40000,
                _connectionKey: '6::::443',
                [Symbol(IncomingMessage)]: [Function],
                [Symbol(ServerResponse)]: [Function],
                [Symbol(handshake-timeout)]: 120000,
                [Symbol(snicallback)]: undefined,
                [Symbol(asyncId)]: 36 },
        _server: null,
            ssl:
        TLSWrap {
            _parent: [TCP],
                _parentWrap: [Socket],
                _secureContext: [SecureContext],
                reading: true,
                onread: [Function: onStreamRead],
            onhandshakestart: [Function: onhandshakestart],
            onhandshakedone: [Function: onhandshakedone],
            onclienthello: [Function: loadSession],
            oncertcb: [Function: loadSNI],
            onnewsession: [Function: onnewsession],
            lastHandshakeTime: 27784,
                handshakes: 0,
                onerror: [Function: onerror],
            _consumed: true,
                [Symbol(owner)]: [Circular] },
        _requestCert: false,
            _rejectUnauthorized: true,
            timeout: 120000,
            parser:
        HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            '4': [Function: bound onParserExecute],
            _headers: [],
                _url: '',
                socket: [Circular],
                incoming: [IncomingMessage],
                outgoing: null,
                maxHeaderPairs: 2000,
                _consumed: true,
                onIncoming: [Function: bound parserOnIncoming],
            parsingHeadersStart: 0,
                [Symbol(isReused)]: true },
        on: [Function: socketOnWrap],
        _paused: false,
            _httpMessage: [Circular],
            _peername:
        { address: '::ffff:212.112.122.179',
            family: 'IPv6',
            port: 56678 },
        [Symbol(res)]:
        TLSWrap {
            _parent: [TCP],
                _parentWrap: [Socket],
                _secureContext: [SecureContext],
                reading: true,
                onread: [Function: onStreamRead],
            onhandshakestart: [Function: onhandshakestart],
            onhandshakedone: [Function: onhandshakedone],
            onclienthello: [Function: loadSession],
            oncertcb: [Function: loadSNI],
            onnewsession: [Function: onnewsession],
            lastHandshakeTime: 27784,
                handshakes: 0,
                onerror: [Function: onerror],
            _consumed: true,
                [Symbol(owner)]: [Circular] },
        [Symbol(asyncId)]: 3020,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]:
        Timeout {
            _called: false,
                _idleTimeout: 120000,
                _idlePrev: [TimersList],
                _idleNext: [TimersList],
                _idleStart: 29965,
                _onTimeout: [Function: bound ],
            _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(unrefed)]: true,
                [Symbol(asyncId)]: 3053,
                [Symbol(triggerId)]: 3024 },
        [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(error-emitted)]: false },
    _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
        _expect_continue: false,
        req:
    IncomingMessage {
        _readableState:
            ReadableState {
            objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: false,
                ended: true,
                endEmitted: true,
                reading: false,
                sync: false,
                needReadable: false,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                paused: false,
                emitClose: true,
                destroyed: false,
                defaultEncoding: 'utf8',
                awaitDrain: 0,
                readingMore: false,
                decoder: null,
                encoding: null },
        readable: false,
            _events:
        [Object: null prototype] {
            end: [Function: onReqEnd],
            error: [Function],
                aborted: [Function: onReqAborted] },
        _eventsCount: 3,
            _maxListeners: undefined,
            socket:
        TLSSocket {
            _tlsOptions: [Object],
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                _SNICallback: null,
                servername: 'kassir.kg',
                alpnProtocol: 'http/1.1',
                authorized: false,
                authorizationError: null,
                encrypted: true,
                _events: [Object],
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _handle: [TLSWrap],
                _parent: [Socket],
                _host: null,
                _readableState: [ReadableState],
                readable: true,
                _maxListeners: undefined,
                _writableState: [WritableState],
                writable: true,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: [Server],
                _server: null,
                ssl: [TLSWrap],
                _requestCert: false,
                _rejectUnauthorized: true,
                timeout: 120000,
                parser: [HTTPParser],
                on: [Function: socketOnWrap],
            _paused: false,
                _httpMessage: [Circular],
                _peername: [Object],
                [Symbol(res)]: [TLSWrap],
                [Symbol(asyncId)]: 3020,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]:
            Timeout {
                _called: false,
                    _idleTimeout: 120000,
                    _idlePrev: [TimersList],
                    _idleNext: [TimersList],
                    _idleStart: 29965,
                    _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                    _repeat: null,
                    _destroyed: false,
                    [Symbol(unrefed)]: true,
                    [Symbol(asyncId)]: 3053,
                    [Symbol(triggerId)]: 3024 },
            [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(error-emitted)]: false },
        connection:
            TLSSocket {
            _tlsOptions: [Object],
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                _SNICallback: null,
                servername: 'kassir.kg',
                alpnProtocol: 'http/1.1',
                authorized: false,
                authorizationError: null,
                encrypted: true,
                _events: [Object],
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _handle: [TLSWrap],
                _parent: [Socket],
                _host: null,
                _readableState: [ReadableState],
                readable: true,
                _maxListeners: undefined,
                _writableState: [WritableState],
                writable: true,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: [Server],
                _server: null,
                ssl: [TLSWrap],
                _requestCert: false,
                _rejectUnauthorized: true,
                timeout: 120000,
                parser: [HTTPParser],
                on: [Function: socketOnWrap],
            _paused: false,
                _httpMessage: [Circular],
                _peername: [Object],
                [Symbol(res)]: [TLSWrap],
                [Symbol(asyncId)]: 3020,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]:
            Timeout {
                _called: false,
                    _idleTimeout: 120000,
                    _idlePrev: [TimersList],
                    _idleNext: [TimersList],
                    _idleStart: 29965,
                    _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                    _repeat: null,
                    _destroyed: false,
                    [Symbol(unrefed)]: true,
                    [Symbol(asyncId)]: 3053,
                    [Symbol(triggerId)]: 3024 },
            [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(error-emitted)]: false },
        httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            headers:
        { host: 'kassir.kg',
            connection: 'keep-alive',
            'content-length': '237',
            accept: 'application/json, text/plain, */*',
            origin: 'https://kassir.kg',
            'user-agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36',
                'content-type':
            'multipart/form-data; boundary=----WebKitFormBoundaryYnx6entGXC7QBFYD',
                referer:
            'https://kassir.kg/selectplace/%D0%A1%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D0%B5&2019-12-31T23:59:00.000Z',
                'accept-encoding': 'gzip, deflate, br',
            'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            cookie:
            'pw_deviceid=7362b1f6-f25e-4d8a-9066-9d0d408f6999; pw_status_a4eb896261ef4e8114b7c2e40934d8a721c402ad87b47b9b12d0edd2eadeed15=deny; jv_enter_ts_zi6xtFYioF=1553069011452; jv_visits_count_zi6xtFYioF=1; jv_utm_zi6xtFYioF=; SCROLL_BANNER_CLOSED=true; jv_close_time_zi6xtFYioF=1553069075845; jv_prechat2_zi6xtFYioF=0%7C0%7C0%7C0%7C0' },
        rawHeaders:
            [ 'Host',
                'kassir.kg',
                'Connection',
                'keep-alive',
                'Content-Length',
                '237',
                'Accept',
                'application/json, text/plain, */*',
                'Origin',
                'https://kassir.kg',
                'User-Agent',
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36',
                'Content-Type',
                'multipart/form-data; boundary=----WebKitFormBoundaryYnx6entGXC7QBFYD',
                'Referer',
                'https://kassir.kg/selectplace/%D0%A1%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D0%B5&2019-12-31T23:59:00.000Z',
                'Accept-Encoding',
                'gzip, deflate, br',
                'Accept-Language',
                'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Cookie',
                'pw_deviceid=7362b1f6-f25e-4d8a-9066-9d0d408f6999; pw_status_a4eb896261ef4e8114b7c2e40934d8a721c402ad87b47b9b12d0edd2eadeed15=deny; jv_enter_ts_zi6xtFYioF=1553069011452; jv_visits_count_zi6xtFYioF=1; jv_utm_zi6xtFYioF=; SCROLL_BANNER_CLOSED=true; jv_close_time_zi6xtFYioF=1553069075845; jv_prechat2_zi6xtFYioF=0%7C0%7C0%7C0%7C0' ],
                trailers: {},
        rawTrailers: [],
            aborted: false,
            upgrade: false,
            url: '/elsom/generate',
            method: 'POST',
            statusCode: null,
            statusMessage: null,
            client:
        TLSSocket {
            _tlsOptions: [Object],
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                _SNICallback: null,
                servername: 'kassir.kg',
                alpnProtocol: 'http/1.1',
                authorized: false,
                authorizationError: null,
                encrypted: true,
                _events: [Object],
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _handle: [TLSWrap],
                _parent: [Socket],
                _host: null,
                _readableState: [ReadableState],
                readable: true,
                _maxListeners: undefined,
                _writableState: [WritableState],
                writable: true,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: [Server],
                _server: null,
                ssl: [TLSWrap],
                _requestCert: false,
                _rejectUnauthorized: true,
                timeout: 120000,
                parser: [HTTPParser],
                on: [Function: socketOnWrap],
            _paused: false,
                _httpMessage: [Circular],
                _peername: [Object],
                [Symbol(res)]: [TLSWrap],
                [Symbol(asyncId)]: 3020,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]:
            Timeout {
                _called: false,
                    _idleTimeout: 120000,
                    _idlePrev: [TimersList],
                    _idleNext: [TimersList],
                    _idleStart: 29965,
                    _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                    _repeat: null,
                    _destroyed: false,
                    [Symbol(unrefed)]: true,
                    [Symbol(asyncId)]: 3053,
                    [Symbol(triggerId)]: 3024 },
            [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(error-emitted)]: false },
        _consuming: true,
            _dumped: false,
            next: [Function: next],
        baseUrl: '/payment',
            originalUrl: '/payment/elsom/generate',
            _parsedUrl:
        Url {
            protocol: null,
                slashes: null,
                auth: null,
                host: null,
                port: null,
                hostname: null,
                hash: null,
                search: null,
                query: null,
                pathname: '/elsom/generate',
                path: '/elsom/generate',
                href: '/elsom/generate',
                _raw: '/elsom/generate' },
        params: {},
        query: {},
        res: [Circular],
            _startAt: [ 1293597, 436573811 ],
            _startTime: 2019-03-20T08:07:32.035Z,
            _remoteAddress: '::ffff:212.112.122.179',
            body: { sum: '1', wallet: '245139354' },
        secret: undefined,
            cookies:
        { pw_deviceid: '7362b1f6-f25e-4d8a-9066-9d0d408f6999',
            pw_status_a4eb896261ef4e8114b7c2e40934d8a721c402ad87b47b9b12d0edd2eadeed15: 'deny',
            jv_enter_ts_zi6xtFYioF: '1553069011452',
            jv_visits_count_zi6xtFYioF: '1',
            jv_utm_zi6xtFYioF: '',
            SCROLL_BANNER_CLOSED: 'true',
            jv_close_time_zi6xtFYioF: '1553069075845',
            jv_prechat2_zi6xtFYioF: '0|0|0|0|0' },
        signedCookies: [Object: null prototype] {},
        files: {},
        _body: true,
            route:
        Route { path: '/elsom/generate', stack: [Array], methods: [Object] } },
    locals: [Object: null prototype] {},
    _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
    __onFinished: { [Function: listener] queue: [ [Function: logRequest] ] },
    flush: [Function: flush],
    write: [Function: write],
    end: [Function: end],
    on: [Function: on],
    [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
    [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ],
            'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ],
            'surrogate-control': [ 'Surrogate-Control', 'no-store' ],
            'cache-control':
        [ 'Cache-Control',
            'no-store, no-cache, must-revalidate, proxy-revalidate' ],
            pragma: [ 'Pragma', 'no-cache' ],
            expires: [ 'Expires', '0' ],
            'content+type': [ 'Content+Type', 'text/json; charset=utf-8' ] } }
